The ``3-say_my_name`` module
======================

Using ``say_my_name``
-------------------

Import module:

    >>> say_my_name = __import__('3-say_my_name').say_my_name

Test an add with only one argument:

    >>> say_my_name("Juan", "Diego")
    My name is Juan Diego

Test an add with only one argument:

    >>> say_my_name("Juan", )
    My name is Juan 

Test an add with only one argument:

    >>> say_my_name("Juan")
    My name is Juan 

Test an add with only one argument:

    >>> say_my_name("Juan", "-48624")
    My name is Juan -48624

Test a comun sum:

    >>> say_my_name(3, "Diego")
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string

Test whatever:

    >>> say_my_name("Juan", -56146)
    Traceback (most recent call last):
        ...
    TypeError: last_name must be a string

Test a comun sum:

    >>> say_my_name(None, "Diego")
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string

Test whatever:

    >>> say_my_name("Juan", None)
    Traceback (most recent call last):
        ...
    TypeError: last_name must be a string

Test a comun sum:

    >>> say_my_name(None, None)
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string

Test a comun sum:

    >>> say_my_name([1, 23, 8], "Diego")
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string

Test a comun sum:

    >>> say_my_name((), "Diego")
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string

Test a comun sum:

    >>> say_my_name()
    Traceback (most recent call last):
        ...
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'
